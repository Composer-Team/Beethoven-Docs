"use strict";(self.webpackChunkbeethoven_docs=self.webpackChunkbeethoven_docs||[]).push([[3108],{1681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"type":"mdx","permalink":"/Beethoven-Docs/Beethoven/Platform/Kria","source":"@site/src/pages/Beethoven/Platform/Kria.md","title":"AMD Kria (Zynq) Implementation flow","description":"Setup","frontMatter":{},"unlisted":false}');var a=t(4848),o=t(8453);const s={},r="AMD Kria (Zynq) Implementation flow",l={},h=[{value:"Setup",id:"setup",level:2},{value:"EDA Machine",id:"eda-machine",level:3},{value:"Kria",id:"kria",level:3},{value:"Building and Flashing FPGA Image",id:"building-and-flashing-fpga-image",level:2},{value:"Running on Kria",id:"running-on-kria",level:2},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Moving Over Headers",id:"moving-over-headers",level:3},{value:"Build Runtime and Go!",id:"build-runtime-and-go",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"amd-kria-zynq-implementation-flow",children:"AMD Kria (Zynq) Implementation flow"})}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.p,{children:"Our development setup does not need to change from your main computing environment.\nIf you're developing on Beethoven on Mac/Windows, that's fine and you won't need to install Vivado to run your design.\nIn practice, we have a remote EDA machine that's connected to our Kria board.\nIf you have a Kria board/EDA tools installed somewhere then you can modify this procedure to your liking, but this is\nhow we have it working."}),"\n",(0,a.jsx)(n.h3,{id:"eda-machine",children:"EDA Machine"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"RHEL 8"}),"\n",(0,a.jsx)(n.li,{children:"Vivado 2024.2"}),"\n",(0,a.jsxs)(n.li,{children:["Vivado cable drivers installed for flashing FPGA over JTAG ",(0,a.jsx)(n.a,{href:"https://digilent.com/reference/programmable-logic/guides/install-cable-drivers",children:"[link]"}),". Only do the first command, adding users is unnecessary."]}),"\n",(0,a.jsx)(n.li,{children:"Java 17 or older"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"kria",children:"Kria"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Petalinux"}),"\n",(0,a.jsx)(n.li,{children:"CMake from source"}),"\n",(0,a.jsx)(n.li,{children:"C++17 compliant compiler"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"building-and-flashing-fpga-image",children:"Building and Flashing FPGA Image"}),"\n",(0,a.jsx)(n.p,{children:"When you've tested your design and are ready to deploy, we'll have to build the accelerator in Synthesis mode."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"object MyAcceleratorKria extends BeethovenBuild(new MyAcceleratorConfig,\n  buildMode = BuildMode.Synthesis,\n  platform = new KriaPlatform())\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you're building in an IDE that supports remote development, you can use this opportunity to run this function\non your EDA machine. The IDE ",(0,a.jsx)(n.em,{children:"should"})," handle moving over all of the necessary files for running things remotely.\nOtherwise, you can commit your code, clone it on your EDA machine and run the main file that way. Both ways work\nperfectly."]}),"\n",(0,a.jsxs)(n.p,{children:["Now, when you ",(0,a.jsx)(n.code,{children:"cd $BEETHOVEN_PATH/build/"})," on your EDA machine, you'll notice the following files."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"(base) [chriskjellqvist@oak build]$ ls\nbeethoven              beethoven_hardware.h  hw      synth.tcl             vcs_srcs.in\nbeethoven_hardware.cc  cmake_srcs.cmake      ip.tcl  user_constraints.xdc\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In particular, these ",(0,a.jsx)(n.code,{children:".tcl"})," files are the scripts we generate for building your Kria accelerator."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"synth.tcl"})," - the main .tcl that you should run"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ip.tcl"})," - generate any Xilinx IPs that you need or declared in your program"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can build your accelerator like so..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# enter the vivado shell\nvivado -mode tcl\n# start synthesizing\nsource synth.tcl\n# once we're done, we'll use the GUI to deploy our design\nstart_gui\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now the following GUI should come up."}),"\n",(0,a.jsx)("p",{align:"center",children:(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/1_initial.png"})}),"\n",(0,a.jsx)(n.p,{children:'If you pass timing and all that good stuff (you can check under the "Open Implemented Design" tab on the left panel),\nthen generate bitstream (also on the left panel). Once you\'re done there, open up the hardware design like so:'}),"\n",(0,a.jsx)("p",{align:"center",children:(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/2_hw_manager.png"})}),"\n",(0,a.jsxs)(n.p,{children:["Start up the hardware server next. If you've installed the cable drivers correctly, it should all ",(0,a.jsx)(n.em,{children:"just work"}),"."]}),"\n",(0,a.jsx)("p",{align:"center",children:(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/3_server.png"})}),"\n",(0,a.jsx)(n.p,{children:"Next, right click the FPGA on Kria and program it using your bitstream:"}),"\n",(0,a.jsxs)("p",{align:"center",children:[(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/4_program.png"}),(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/5_flash.png"}),(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/6_progress.png"})]}),"\n",(0,a.jsx)(n.p,{children:"Now you may hear the fan spin up on your Kria board because the FPGA is active. We've had trouble with the fan\ncontrol in petalinux so we have a fan with an external manual control to keep the office quiet."}),"\n",(0,a.jsxs)("p",{align:"center",children:[(0,a.jsx)("img",{src:"/Beethoven-Docs/img/kria/7_setup.jpg"}),(0,a.jsx)(n.p,{children:"Our Office Setup. EDA box to the left, Kria, network switch and fan center. The white cable connects the micro-USB Kria\nconnector to our EDA box for JTAG."})]}),"\n",(0,a.jsx)(n.h2,{id:"running-on-kria",children:"Running on Kria"}),"\n",(0,a.jsx)(n.h3,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,a.jsxs)(n.p,{children:["First thing's first, make sure your environment is set up correctly. In our ",(0,a.jsx)(n.code,{children:"~/.bashrc"})," on kria, it's important that\nwe first install the correct C/C++ compilers:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dnf install g++ gcc python3\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This should install something like version 12.2 or similar. These have support for C++17 so they will be sufficient.\nNext, install ",(0,a.jsx)(n.a,{href:"https://cmake.org",children:"Cmake"})," from source. Unfortunately, this seems to be necessary because the Kria repos\ndo not have a package for this."]}),"\n",(0,a.jsxs)(n.p,{children:["Now, get your ",(0,a.jsx)(n.code,{children:"~/.bashrc"})," in shape. These are the most important lines to have. This assumes that your user is ",(0,a.jsx)(n.code,{children:"petalinux"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"export CXX=aarch64-xilinx-linux-g++\nexport CC=aarch64-xilinx-linux-gcc\nexport BEETHOVEN_PATH=/home/petalinux/Beethoven\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Go ahead and ",(0,a.jsx)(n.code,{children:"mkdir ~/Beethoven"}),". Now, get the Beethoven environment."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/Composer-Team/Beethoven-Software\ngit clone https://github.com/Composer-Team/Beethoven-Runtime\ngit clone https://github.com/Composer-Team/Beethoven\ncd Beethoven-Software\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPLATFORM=kria\nmake -j4\nsudo make install\ncd ../../\ncp Beethoven/bin/kria/kria_mm.py ~/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You should now have the software installed correctly and a file called ",(0,a.jsx)(n.code,{children:"kria_mm.py"})," in your home directory. Because the\nKria system shares the same DRAM space between FPGA and CPU, the operating system needs to know about any allocations\nthat you use in the FPGA, in contrast to the discrete FPGA boards. We use Linux Hugepages make large, physicaly contiguous\nallocations that are accessible from the FPGA and cache coherent with the CPU. However, these pages need to be\npreallocated so we provide this script."]}),"\n",(0,a.jsxs)(n.p,{children:["Whenever you run the ",(0,a.jsx)(n.code,{children:"kria_mm.py"})," script (sudo required), you should get the following."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"xilinx-kv260-starterkit-20241:~$ sudo python3 kria_mm.py\nPassword:\nHugepage allocations----------------------\n[idx]\t[name]             \t[n_alloc]\t[n_free]\n\n[0]\t    hugepages-2048kB   \t0\t\t    0\n[1]\t    hugepages-32768kB  \t0\t\t    0\n[2]\t    hugepages-64kB     \t0\t\t    0\n[3]\t    hugepages-1048576kB\t0\t\t    0\nWhich hugepage allocation to modify (enter to quit)\n>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To allocate 64 of 2048kB blocks, we would type ",(0,a.jsx)(n.code,{children:"0"}),", ",(0,a.jsx)(n.code,{children:"<enter>"}),", and then the number of blocks, ",(0,a.jsx)(n.code,{children:"64"}),".\nThe script will wait a second and make sure the effects have persisted. Allocating extremely large blocks (e.g., 1GB) may\nfail if the system does not have any allocations of that size available."]}),"\n",(0,a.jsx)(n.p,{children:"After the above commmand, the final printout should look something like this."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"xilinx-kv260-starterkit-20241:~$ python3 kria_mm.py\nThis script must be run as root\nxilinx-kv260-starterkit-20241:~$ sudo python3 kria_mm.py\nPassword:\nHugepage allocations----------------------\n[idx]\t[name]             \t[n_alloc]\t[n_free]\n\n[0]\thugepages-2048kB   \t0\t\t0\n[1]\thugepages-32768kB  \t0\t\t0\n[2]\thugepages-64kB     \t0\t\t0\n[3]\thugepages-1048576kB\t0\t\t0\nWhich hugepage allocation to modify (enter to quit)\n> 0\nCurrent allocation of [hugepages-2048kB]: 0/0 available\nHow many hugepages to set the max allocation to?\n> 64\nSet allocation of [hugepages-2048kB] to 64. Waiting a second to recheck...\nRechecking...\nSuccessfully set allocation of [hugepages-2048kB] to 64\nxilinx-kv260-starterkit-20241:~$\n"})}),"\n",(0,a.jsx)(n.p,{children:"Allocations that use standard page sizes (4kB) will still use standard pages, but for anything larger, we'll use the smallest\npage size available. Unfortunately, this means you should have a good idea of how many pages you'll need before hand. The allocator\nwill throw and if it fails to allocate, so these situations should make themselves immediately visible."}),"\n",(0,a.jsx)(n.h3,{id:"moving-over-headers",children:"Moving Over Headers"}),"\n",(0,a.jsxs)(n.p,{children:["It would be a pain to build your hardware and generate the headers on Kria so we use ",(0,a.jsx)(n.code,{children:"rsync"})," to move over all the necessary headers\nfrom the EDA/development machine."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"rsync -rzah $BEETHOVEN_PATH/ petalinux@<KRIA_IP>:~/Beethoven/\n"})}),"\n",(0,a.jsx)(n.h3,{id:"build-runtime-and-go",children:"Build Runtime and Go!"}),"\n",(0,a.jsx)(n.p,{children:"Then, on Kria, we can build the runtime."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~/Beethoven-Runtime\nmkdir build\ncd build\ncmake .. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -TARGET=fpga \\\n    -DBACKEND=Kria\nmake -j4\nsudo ./BeethovenRuntime\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In a different TTY, we can run our testbench. The testbench will use the same build procedure as with simulator or any other backend.\nThen, just run with ",(0,a.jsx)(n.code,{children:"sudo"})," and voila!"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);